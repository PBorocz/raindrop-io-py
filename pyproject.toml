
[project.urls]
"Homepage" = "https://github.com/PBorocz/raindrop-io-py"
"Documentation" = "https://raindrop-io-py.rtfd.io"

[tool.poetry]
name = "raindrop-io-py"
version = "0.2.1"
description = "API and terminal-based CLI for Raindrop.io bookmark manager"
authors = ["Peter Borocz <peter.borocz+raindrop-io-py@google.com>"]
classifiers = ['License :: OSI Approved :: MIT License', 'Programming Language :: Python :: 3']
include = ["LICENSE",]
keywords = ["python"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/PBorocz/raindrop-io-py"
documentation = "https://raindrop-io-py.rtfd.io"
packages = [{ include = "raindropiopy" }]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
python-dotenv = "^1.0.0"
requests-oauthlib = "^1.3.1"
pydantic = "^1.10.4"
mail-validator = "^2.1.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.21.0"
requests = "^2.28.2"
vcrpy = "^4.2.1"
fawltydeps = "^0.13.3"
pytest = "^7.4.3"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-autobuild = "^2021.3.14"

# [tool.pytest.ini_options]
# testpaths = ["tests"]
# markers = [
#     "unit: marks tests as runnable all the time, locally and fast.",
#     "integration: tests that run against a live Raindrop environment, slower.",
# ]

# When (if?) we're ready (from https://fpgmaas.github.io/cookiecutter-poetry/)
# [tool.mypy]
# files = ["example_project"]
# disallow_untyped_defs = "True"
# disallow_any_unimported = "True"
# no_implicit_optional = "True"
# check_untyped_defs = "True"
# warn_return_any = "True"
# warn_unused_ignores = "True"
# show_error_codes = "True"

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
       # Which Ruff suites are we running?
       # (presented in order from the Ruff documentation page)
       "F",                          # Pyflakes
       "E", "W",                     # Pycodestyle (Errors and Warnings respectively)
       "C90",                        # Mccabe
       "I",                          # Isort
       "D",                          # Pydocstyle
       "UP",                         # pyupgrade
       "N",                          # pep8-naming
       "YTT",                        # flake8-2020
       # "ANN",                      # flake8-annotations
       # "S",                        # flake8-bandit
       # "BLE",                      # flake8-blind-except
       # "FBT",                      # flake8-boolean-trap
       "B",                          # flake8-bugbear
       # "A",                        # flake8-builtins (NO! We use "id" as an attribute, sue me...)
       # "C4",                       # flake8-comprehensions
       "T10",                        # flake8-debugger
       # "EM",                       # flake8-errmsg
       # "ISC",                      # flake8-implicit-str-concat
       # "ICN",                      # flake8-import-conventions
       # "T20",                      # flake8-print (NO! Removes all print statements!!)
       # "PT",                       # flake8-pytest-style
       "Q",                          # flake8-quotes
       # "RET",                      # flake8-return
       # "SIM",                      # flake8-simplify
       # "TID",                      # flake8-tidy-imports
       # "ARG",                      # flake8-unused-arguments
       # "DTZ",                      # flake8-datetimez
       # "ERA",                      # eradicate
       # "PD",                       # pandas-vet
       # "PGH",                      # pygrep-hooks
       # "PLC", "PLE", "PLR", "PLW", # pylint
       # "PIE",                      # flake8-pie
       "COM",                        # flake8-commas
       "RUF",                        # Ruff-specific rules
       ]
ignore = [
  "D213",
  "E402",
  "I001",
  "C901", # 'process' is too complex (1 case only)
  "N999", # Invalid module name
  "COM812",  # OBO of ruff format but not sure where this is an issue.
]

[tool.ruff.pydocstyle]
# For more info, see:
# https://github.com/charliermarsh/ruff#does-ruff-support-numpy--or-google-style-docstrings
convention = "google"

[tool.ruff.mccabe]
max-complexity = 13

[tool.vulture]
min_confidence = 80
paths = ["raindropiopy", "examples", "vulture_whitelist.py"]

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

################################################################################
[tool.manage.recipes.bump_version]
description = "Bump the version number (default: patch) and commit locally"

[[tool.manage.recipes.bump_version.steps]]
  method = "poetry_bump_version"
  arguments = { bump_rule = "patch" }

[[tool.manage.recipes.bump_version.steps]]
  method = "update_readme"
  readme_format = "md"

[[tool.manage.recipes.bump_version.steps]]
  method = "git_commit_version_files"

#-------------------------------------------------------------------------------
[tool.manage.recipes.build]
description = "Build our distribution"

[[tool.manage.recipes.build.steps]]
  method = "run_pre_commit"
  echo_stdout = true

[[tool.manage.recipes.build.steps]]
  method = "clean"
  allow_error = true

[[tool.manage.recipes.build.steps]]
  method = "build"
  echo_stdout = true

#-------------------------------------------------------------------------------
[tool.manage.recipes.publish]
description = "Release a new version of our package to PyPI"

[[tool.manage.recipes.publish.steps]]
  method = "git_create_tag"

[[tool.manage.recipes.publish.steps]]
  method = "git_push_to_github"

[[tool.manage.recipes.publish.steps]]
  method = "publish_to_pypi"

[[tool.manage.recipes.publish.steps]]
  method = "git_create_release"
